spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=9403570266
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

server.port=8081

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service


#using actuator we can monitor different health metrics of the system
management.health.circuitbreakers.enabled=enabled
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


#Resilinece4j Properties
#take a look at the instances.inventory

#To see diff states of CB
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

#how much buffer size for events
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

#don't open the CB right away. wait for some requests to fail
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#sliding window size
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

#50% calls failed
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

#how much time to wait in open state before going into half open
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4j Timeout Properties(For slow network)
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4j Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

management.tracing.sampling.probability=1.0


#Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.pcdev.orderservice.event.OrderPlacedEvent

